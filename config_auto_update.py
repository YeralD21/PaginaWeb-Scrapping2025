#!/usr/bin/env python3
"""
Configurador del sistema de actualizaci√≥n autom√°tica
Permite personalizar la frecuencia de scraping y otros par√°metros
"""

import os
import json
from pathlib import Path

class AutoUpdateConfig:
    def __init__(self):
        self.config_file = Path("auto_update_config.json")
        self.default_config = {
            "schedule_interval_minutes": 15,
            "max_news_per_scraping": 50,
            "enable_notifications": True,
            "notification_sound": True,
            "auto_refresh_frontend": True,
            "frontend_refresh_interval_seconds": 30,
            "log_level": "INFO",
            "backup_database": True,
            "cleanup_old_news_days": 30
        }
        self.config = self.load_config()
    
    def load_config(self):
        """Cargar configuraci√≥n desde archivo"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                # Combinar con valores por defecto
                for key, value in self.default_config.items():
                    if key not in config:
                        config[key] = value
                return config
            except Exception as e:
                print(f"Error cargando configuraci√≥n: {e}")
                return self.default_config.copy()
        else:
            return self.default_config.copy()
    
    def save_config(self):
        """Guardar configuraci√≥n a archivo"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            print("‚úÖ Configuraci√≥n guardada correctamente")
        except Exception as e:
            print(f"‚ùå Error guardando configuraci√≥n: {e}")
    
    def show_current_config(self):
        """Mostrar configuraci√≥n actual"""
        print("=" * 50)
        print("üìã CONFIGURACI√ìN ACTUAL DEL SISTEMA")
        print("=" * 50)
        print(f"‚è±Ô∏è  Frecuencia de scraping: {self.config['schedule_interval_minutes']} minutos")
        print(f"üì∞ M√°ximo noticias por scraping: {self.config['max_news_per_scraping']}")
        print(f"üîî Notificaciones habilitadas: {'S√≠' if self.config['enable_notifications'] else 'No'}")
        print(f"üîä Sonido de notificaciones: {'S√≠' if self.config['notification_sound'] else 'No'}")
        print(f"üîÑ Auto-refresh frontend: {'S√≠' if self.config['auto_refresh_frontend'] else 'No'}")
        print(f"‚è∞ Intervalo refresh frontend: {self.config['frontend_refresh_interval_seconds']} segundos")
        print(f"üìù Nivel de logs: {self.config['log_level']}")
        print(f"üíæ Backup autom√°tico BD: {'S√≠' if self.config['backup_database'] else 'No'}")
        print(f"üóëÔ∏è  Limpiar noticias antiguas: {self.config['cleanup_old_news_days']} d√≠as")
        print("=" * 50)
    
    def configure_frequency(self):
        """Configurar frecuencia de scraping"""
        print("\n‚è±Ô∏è  CONFIGURAR FRECUENCIA DE SCRAPING")
        print("Opciones recomendadas:")
        print("‚Ä¢ 5 minutos: Muy frecuente (para desarrollo/testing)")
        print("‚Ä¢ 15 minutos: Frecuente (recomendado para producci√≥n)")
        print("‚Ä¢ 30 minutos: Moderado")
        print("‚Ä¢ 60 minutos: Espaciado")
        print("‚Ä¢ 120 minutos: Muy espaciado")
        
        while True:
            try:
                minutes = int(input("\nIngresa la frecuencia en minutos (5-120): "))
                if 5 <= minutes <= 120:
                    self.config['schedule_interval_minutes'] = minutes
                    print(f"‚úÖ Frecuencia configurada a {minutes} minutos")
                    break
                else:
                    print("‚ùå Por favor ingresa un valor entre 5 y 120 minutos")
            except ValueError:
                print("‚ùå Por favor ingresa un n√∫mero v√°lido")
    
    def configure_notifications(self):
        """Configurar notificaciones"""
        print("\nüîî CONFIGURAR NOTIFICACIONES")
        
        enable = input("¬øHabilitar notificaciones de nuevas noticias? (s/n): ").lower()
        self.config['enable_notifications'] = enable in ['s', 'si', 's√≠', 'y', 'yes']
        
        if self.config['enable_notifications']:
            sound = input("¬øReproducir sonido en notificaciones? (s/n): ").lower()
            self.config['notification_sound'] = sound in ['s', 'si', 's√≠', 'y', 'yes']
    
    def configure_frontend_refresh(self):
        """Configurar auto-refresh del frontend"""
        print("\nüîÑ CONFIGURAR AUTO-REFRESH DEL FRONTEND")
        
        enable = input("¬øHabilitar auto-refresh del frontend? (s/n): ").lower()
        self.config['auto_refresh_frontend'] = enable in ['s', 'si', 's√≠', 'y', 'yes']
        
        if self.config['auto_refresh_frontend']:
            while True:
                try:
                    seconds = int(input("Intervalo de refresh en segundos (10-300): "))
                    if 10 <= seconds <= 300:
                        self.config['frontend_refresh_interval_seconds'] = seconds
                        break
                    else:
                        print("‚ùå Por favor ingresa un valor entre 10 y 300 segundos")
                except ValueError:
                    print("‚ùå Por favor ingresa un n√∫mero v√°lido")
    
    def configure_cleanup(self):
        """Configurar limpieza de noticias antiguas"""
        print("\nüóëÔ∏è  CONFIGURAR LIMPIEZA DE NOTICIAS ANTIGUAS")
        
        while True:
            try:
                days = int(input("D√≠as para mantener noticias (7-365): "))
                if 7 <= days <= 365:
                    self.config['cleanup_old_news_days'] = days
                    print(f"‚úÖ Se mantendr√°n noticias de los √∫ltimos {days} d√≠as")
                    break
                else:
                    print("‚ùå Por favor ingresa un valor entre 7 y 365 d√≠as")
            except ValueError:
                print("‚ùå Por favor ingresa un n√∫mero v√°lido")
    
    def interactive_config(self):
        """Configuraci√≥n interactiva"""
        print("üîß CONFIGURADOR DEL SISTEMA DE ACTUALIZACI√ìN AUTOM√ÅTICA")
        print("Este asistente te ayudar√° a configurar el sistema")
        
        while True:
            self.show_current_config()
            print("\nOpciones:")
            print("1. Configurar frecuencia de scraping")
            print("2. Configurar notificaciones")
            print("3. Configurar auto-refresh del frontend")
            print("4. Configurar limpieza de noticias")
            print("5. Guardar configuraci√≥n y salir")
            print("6. Salir sin guardar")
            
            choice = input("\nSelecciona una opci√≥n (1-6): ")
            
            if choice == '1':
                self.configure_frequency()
            elif choice == '2':
                self.configure_notifications()
            elif choice == '3':
                self.configure_frontend_refresh()
            elif choice == '4':
                self.configure_cleanup()
            elif choice == '5':
                self.save_config()
                print("‚úÖ Configuraci√≥n guardada. Reinicia el sistema para aplicar cambios.")
                break
            elif choice == '6':
                print("üëã Saliendo sin guardar cambios")
                break
            else:
                print("‚ùå Opci√≥n no v√°lida")

def main():
    """Funci√≥n principal"""
    config = AutoUpdateConfig()
    config.interactive_config()

if __name__ == "__main__":
    main()
